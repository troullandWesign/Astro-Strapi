---
import { fetchChampions, fetchChampionById, fetchRoles } from '../../lib/api';

export const prerender = false;

export async function getStaticPaths() {
  const champions = await fetchChampions();
  return champions.map(champion => ({
    params: { id: champion.id.toString() }
  }));
}

const { id } = Astro.params;
const champion = await fetchChampionById(id);
const allRoles = await fetchRoles();

if (!champion) return Astro.redirect('/404');

let imageUrl = null;
if (champion.image?.url) {
  imageUrl = champion.image.url.startsWith('/')
    ? `http://localhost:1337${champion.image.url}`
    : champion.image.url;
}
const altText = champion.image?.alternativeText || champion.nom;
---

<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <title>{champion.nom} ‚Äì League of Legends</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="/src/styles/global.css" rel="stylesheet">
  </head>
  <body class="p-4 max-w-6xl mx-auto bg-gray-50">

    <!-- NAVIGATION -->
    <nav class="flex justify-between items-center mb-8 bg-white p-4 rounded shadow">
      <h1 class="text-2xl font-bold text-blue-600">League of Legends</h1>
      <ul class="flex space-x-4 text-gray-600 font-medium">
        
        <li><a href="/" class="hover:text-blue-500">Champions</a></li>
      </ul>
    </nav>
    <a href="/" class="text-blue-600 font-semibold text-lg hover:underline">
      ‚Üê Retour √† la liste
    </a>
    <main class="max-w-6xl mx-auto mt-6">
      <div class="bg-white p-6 rounded-xl shadow-md">
        <div class="flex flex-col md:flex-row gap-6">
          {imageUrl && (
            <div class="w-full md:w-1/3">
              <img src={imageUrl} alt={altText} class="w-full h-auto rounded-lg shadow" />
            </div>
          )}

          <div class="w-full md:w-2/3">
            <h1 class="text-3xl font-bold text-gray-800 mb-3">{champion.nom}</h1>

            {champion.roles?.length > 0 && (
              <div class="mb-4 flex flex-wrap gap-2">
                {champion.roles.map(role => (
                  <span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                    {role.nom}
                  </span>
                ))}
              </div>
            )}

            <div class="prose max-w-none text-gray-700">
              <h2 class="text-xl font-semibold mt-4">Description</h2>
              <p>{champion.description}</p>
            </div>

            <div class="mt-6 flex gap-3">
              <button id="editBtn" class="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded shadow">
                ‚úèÔ∏è Modifier
              </button>
              <button id="deleteBtn" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded shadow">
                üóëÔ∏è Supprimer
              </button>
            </div>

            <div class="mt-6">
              <h2 class="text-xl font-semibold">Informations</h2>
              <ul class="mt-2 space-y-1 text-gray-600">
                <li><strong>ID :</strong> {champion.id}</li>
                <li><strong>Document ID :</strong> {champion.documentId}</li>
                <li><strong>Ajout√© le :</strong> {new Date(champion.createdAt).toLocaleDateString()}</li>
                <li><strong>Mis √† jour le :</strong> {new Date(champion.updatedAt).toLocaleDateString()}</li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      <!-- MODAL -->
      <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4 overflow-y-auto">
        <div class="bg-white p-6 rounded-lg shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <h2 class="text-2xl font-bold mb-4">Modifier le champion</h2>
          <form id="editForm" class="space-y-4">
            <div>
              <label for="nom" class="block text-sm font-medium">Nom</label>
              <input id="nom" name="nom" type="text" class="w-full border rounded p-2" value={champion.nom}>
            </div>
            <div>
              <label for="description" class="block text-sm font-medium">Description</label>
              <textarea id="description" name="description" rows="4" class="w-full border rounded p-2">{champion.description}</textarea>
            </div>
            <div>
              <label for="roles" class="block text-sm font-medium">R√¥les</label>
              <select id="roles" name="roles" multiple class="w-full border rounded p-2">
                {allRoles.map(role => (
                  <option value={role.id} selected={champion.roles?.some(r => r.id === role.id)}>{role.name}</option>
                ))}
              </select>
              <p class="text-xs text-gray-500 mt-1">Maintenez Ctrl (ou Cmd) pour s√©lectionner plusieurs r√¥les</p>
            </div>
            <div>
              <label for="image" class="block text-sm font-medium">Image</label>
              <input type="file" id="image" name="image" accept="image/*" class="w-full border rounded p-2">
              {imageUrl && (
                <div class="mt-2">
                  <p class="text-sm text-gray-500">Image actuelle :</p>
                  <img src={imageUrl} alt={altText} class="w-24 h-24 object-cover rounded mt-1">
                </div>
              )}
            </div>
            <div class="flex justify-end gap-2">
              <button type="button" id="cancelEdit" class="bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300">Annuler</button>
              <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Enregistrer</button>
            </div>
          </form>
        </div>
      </div>
    </main>

    <!-- JS int√©gr√© -->
    <script define:vars={{ champion, allRoles }}>
      const editModal = document.getElementById("editModal");
      const editForm = document.getElementById("editForm");
      const editBtn = document.getElementById("editBtn");
      const cancelEdit = document.getElementById("cancelEdit");

      editBtn.addEventListener("click", () => {
        document.getElementById("nom").value = champion.nom;
        document.getElementById("description").value = champion.description || "";
        const rolesSelect = document.getElementById("roles");
        Array.from(rolesSelect.options).forEach(option => {
          option.selected = champion.roles.some(role => role.id.toString() === option.value);
        });
        editModal.classList.remove("hidden");
      });

      cancelEdit.addEventListener("click", () => {
        editModal.classList.add("hidden");
      });

      editForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const nom = document.getElementById("nom").value;
        const description = document.getElementById("description").value;
        const rolesSelect = document.getElementById("roles");
        const selectedRoles = Array.from(rolesSelect.selectedOptions).map(option => ({
          id: parseInt(option.value),
          name: option.textContent.trim()
        }));
        const updatedData = { nom, description, roles: selectedRoles };
        const imageInput = document.getElementById("image");
        const hasNewImage = imageInput.files && imageInput.files.length > 0;

        try {
          if (hasNewImage) {
            const formData = new FormData();
            formData.append('file', imageInput.files[0]);
            const uploadResponse = await fetch('/api/upload', { method: 'POST', body: formData });
            if (!uploadResponse.ok) throw new Error('√âchec du t√©l√©chargement de l‚Äôimage');
            const uploadResult = await uploadResponse.json();
            if (uploadResult?.[0]?.id) {
              updatedData.image = uploadResult[0].id;
            }
          }

          const response = await fetch(`/api/champion/${champion.documentId}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updatedData)
          });

          if (response.ok) {
            alert("Champion mis √† jour avec succ√®s !");
            window.location.href = `/champion/${champion.id}`;
          } else {
            alert("Erreur lors de la mise √† jour.");
          }
        } catch (err) {
          alert("Erreur : " + err.message);
        }
      });

      document.getElementById("deleteBtn").addEventListener("click", async () => {
        if (!confirm("Supprimer ce champion ?")) return;
        try {
          const response = await fetch(`/api/champion/${champion.documentId}`, { method: 'DELETE' });
          if (response.ok) {
            alert("Champion supprim√©.");
            window.location.href = "/";
          } else {
            alert("Erreur lors de la suppression.");
          }
        } catch (err) {
          alert("Erreur : " + err.message);
        }
      });
    </script>
  </body>
</html>
