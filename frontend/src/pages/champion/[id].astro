---
// src/pages/champion/[id].astro
import { fetchChampions, fetchChampionById, fetchRoles } from '../../lib/api';

// Pour le mode serveur d'Astro
export const prerender = false;

export async function getStaticPaths() {
  const champions = await fetchChampions();
  console.log("üéØ IDs r√©cup√©r√©s pour SSG:", champions.map(c => c.id));

  return champions.map(champion => ({
    params: { id: champion.id.toString() }
  }));
}

// R√©cup√©ration du param√®tre d'URL
const { id } = Astro.params;

// R√©cup√©ration des donn√©es du champion
const champion = await fetchChampionById(id);

// R√©cup√©ration de tous les r√¥les disponibles
const allRoles = await fetchRoles();

// Gestion des erreurs: redirection si le champion n'existe pas
if (!champion) {
  return Astro.redirect('/404');
}

// Construction de l'URL de l'image avec gestion des URL relatives/absolues
let imageUrl = null;
if (champion.image?.url) {
  imageUrl = champion.image.url.startsWith('/')
    ? `http://localhost:1337${champion.image.url}`
    : champion.image.url;
}

// Texte alternatif pour l'image
const altText = champion.image?.alternativeText || champion.nom;
---

<html>
  <head>
    <title>{champion.nom} ‚Äì League of Legends</title>
    <link rel="stylesheet" href="/src/styles/global.css">
    <meta charset="UTF-8">
  </head>
  <body class="p-4 max-w-5xl mx-auto">
    <a href="/" class="text-blue-500 hover:underline mb-4 inline-block">&larr; Retour √† la liste</a>
    
    <div class="bg-white p-6 rounded-lg shadow-lg">
      <div class="flex flex-col md:flex-row gap-6">
        {imageUrl && (
          <div class="w-full md:w-1/3">
            <img 
              src={imageUrl} 
              alt={altText} 
              class="w-full h-auto rounded-lg shadow"
            />
          </div>
        )}
        
        <div class="w-full md:w-2/3">
          <h1 class="text-3xl font-bold mb-2">{champion.nom}</h1>
          
          {champion.roles?.length > 0 && (
            <div class="mb-4">
              {champion.roles.map(role => (
                <span class="inline-block bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium mr-2">
                  {role.nom}
                </span>
              ))}
            </div>
          )}
          
          <div class="prose max-w-none">
            <h2 class="text-xl font-semibold mt-4">Description</h2>
            <p class="text-gray-700">{champion.description}</p>
            <div class="mt-6 flex gap-4">
              <button 
                id="editBtn" 
                class="bg-yellow-500 text-white px-4 py-2 rounded hover:bg-yellow-600">
                Modifier
              </button>
              <button 
                id="deleteBtn" 
                class="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700">
                Supprimer
              </button>
            </div>
            <div class="mt-6">
              <h2 class="text-xl font-semibold">Informations</h2>
              <ul class="mt-2 space-y-1 text-gray-600">
                <li><span class="font-medium">ID:</span> {champion.id}</li>
                <li><span class="font-medium">Document ID:</span> {champion.documentId}</li>
                <li><span class="font-medium">Ajout√© le:</span> {new Date(champion.createdAt).toLocaleDateString()}</li>
                <li><span class="font-medium">Mis √† jour le:</span> {new Date(champion.updatedAt).toLocaleDateString()}</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal d'√©dition -->
    <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center p-4">
      <div class="bg-white p-6 rounded-lg shadow-xl w-full max-w-2xl">
        <h2 class="text-2xl font-bold mb-4">Modifier le champion</h2>
        <form id="editForm" class="space-y-4">
          <div>
            <label for="nom" class="block text-sm font-medium text-gray-700">Nom</label>
            <input type="text" id="nom" name="nom" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" value={champion.nom}>
          </div>
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
            <textarea id="description" name="description" rows="4" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">{champion.description}</textarea>
          </div>
          <div>
            <label for="roles" class="block text-sm font-medium text-gray-700">R√¥les</label>
            <select id="roles" name="roles" multiple class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">
              {allRoles.map(role => (
                <option 
                  value={role.id} 
                  selected={champion.roles?.some(r => r.id === role.id)}
                >
                  {role.name}
                </option>
              ))}
            </select>
            <p class="text-xs text-gray-500 mt-1">Maintenez Ctrl (ou Cmd) pour s√©lectionner plusieurs r√¥les</p>
          </div>
          <div>
            <label for="image" class="block text-sm font-medium text-gray-700">Image</label>
            <input type="file" id="image" name="image" accept="image/*" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2">
            {imageUrl && (
              <div class="mt-2">
                <p class="text-sm text-gray-500">Image actuelle:</p>
                <div class="mt-1 w-24 h-24 relative">
                  <img src={imageUrl} alt={altText} class="w-full h-full object-cover rounded">
                </div>
              </div>
            )}
          </div>
          <div class="flex justify-end gap-2">
            <button type="button" id="cancelEdit" class="bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300">Annuler</button>
            <button type="submit" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Enregistrer</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Passer les donn√©es du champion au script c√¥t√© client -->
    <script define:vars={{ champion, allRoles }}>
      console.log("Champion data:", champion);
      console.log("Roles disponibles:", allRoles);
      
      // Gestion du modal d'√©dition
      const editModal = document.getElementById("editModal");
      const editForm = document.getElementById("editForm");
      const editBtn = document.getElementById("editBtn");
      const cancelEdit = document.getElementById("cancelEdit");
      
      // Ouvrir le modal d'√©dition
      editBtn.addEventListener("click", () => {
        // Pr√©-remplir tous les champs du formulaire
        document.getElementById("nom").value = champion.nom;
        document.getElementById("description").value = champion.description || "";
        
        // S√©lectionner les r√¥les actuels dans le select multiple
        const rolesSelect = document.getElementById("roles");
        if (rolesSelect && champion.roles) {
          Array.from(rolesSelect.options).forEach(option => {
            option.selected = champion.roles.some(role => role.id.toString() === option.value);
          });
        }
        
        // Afficher le modal
        editModal.classList.remove("hidden");
      });
      
      // Fermer le modal
      cancelEdit.addEventListener("click", () => {
        editModal.classList.add("hidden");
      });
      
      // Soumission du formulaire d'√©dition
      editForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        
        // Pr√©paration des donn√©es de base
        const nom = document.getElementById("nom").value;
        const description = document.getElementById("description").value;
        
        // R√©cup√©ration des r√¥les s√©lectionn√©s
        const rolesSelect = document.getElementById("roles");
        const selectedRoles = Array.from(rolesSelect.selectedOptions).map(option => ({
          id: parseInt(option.value),
          name: option.textContent.trim()
        }));
        
        // Construction des donn√©es √† envoyer
        const updatedData = {
          nom,
          description,
          roles: selectedRoles
        };
        
        // Gestion de l'image si pr√©sente
        const imageInput = document.getElementById("image");
        const hasNewImage = imageInput.files && imageInput.files.length > 0;
        
        try {
          // Si une nouvelle image est s√©lectionn√©e, il faut d'abord l'uploader
          if (hasNewImage) {
            const formData = new FormData();
            formData.append('file', imageInput.files[0]); // Utilise 'file' au lieu de 'files'
            
            console.log("Envoi de l'image via le proxy...");
            const uploadResponse = await fetch('/api/upload', {  // Utilise notre endpoint proxy
              method: 'POST',
              body: formData
            });
            
            if (!uploadResponse.ok) {
              const errorData = await uploadResponse.json().catch(() => ({ error: `${uploadResponse.status}: ${uploadResponse.statusText}` }));
              throw new Error(`Erreur d'upload d'image: ${errorData.error || uploadResponse.status}`);
            }
            
            const uploadResult = await uploadResponse.json();
            console.log("Image upload√©e avec succ√®s:", uploadResult);
            
            // Ajouter l'ID de l'image aux donn√©es √† mettre √† jour
            if (uploadResult && uploadResult.length > 0) {
              updatedData.image = uploadResult[0].id;
            }
          }
          
          console.log(`Envoi d'une requ√™te PUT √† /api/champion/${champion.documentId}`, updatedData);
          const response = await fetch(`/api/champion/${champion.documentId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(updatedData),
          });

          console.log("R√©ponse de mise √† jour:", response);

          if (response.ok) {
            // CORRECTION ICI: Stocker l'ID num√©rique du champion pour la redirection
            const numericId = champion.id;
            
            alert("Champion mis √† jour avec succ√®s !");
            
            // CORRECTION: S'assurer que l'ID utilis√© pour la redirection est correct
            window.location.href = `/champion/${numericId}`;
          } else {
            const errorData = await response.json().catch(() => ({ error: `${response.status}: ${response.statusText}` }));
            alert(`Erreur lors de la mise √† jour: ${errorData.error || response.statusText}`);
          }
        } catch (error) {
          console.error("Erreur:", error);
          alert(`Erreur lors de la mise √† jour: ${error.message}`);
        }
      });

      // Suppression du champion
      document.getElementById("deleteBtn").addEventListener("click", async () => {
        if (!confirm(`Supprimer ce champion ?`)) return;

        try {
          console.log(`Envoi d'une requ√™te DELETE √† /api/champion/${champion.documentId}`);
          const response = await fetch(`/api/champion/${champion.documentId}`, {
            method: 'DELETE'
          });

          console.log("R√©ponse de suppression:", response);

          if (response.ok) {
            alert("Champion supprim√© avec succ√®s !");
            window.location.href = "/";
          } else {
            const errorData = await response.json().catch(() => ({ error: `${response.status}: ${response.statusText}` }));
            alert(`Erreur lors de la suppression: ${errorData.error || response.statusText}`);
          }
        } catch (error) {
          console.error("Erreur:", error);
          alert(`Erreur lors de la suppression: ${error.message}`);
        }
      });
    </script>
  </body>
</html>